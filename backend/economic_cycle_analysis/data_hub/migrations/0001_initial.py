# Generated by Django 5.2.2 on 2025-06-16 09:08

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="IndicatorCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="分类名称"
                    ),
                ),
                (
                    "name_en",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="英文名称"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="分类代码"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="描述"),
                ),
                ("level", models.IntegerField(default=1, verbose_name="分类层级")),
                ("sort_order", models.IntegerField(default=0, verbose_name="排序顺序")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否启用"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data_hub.indicatorcategory",
                        verbose_name="父分类",
                    ),
                ),
            ],
            options={
                "verbose_name": "指标分类",
                "verbose_name_plural": "指标分类",
                "ordering": ["level", "sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Indicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="指标名称")),
                (
                    "name_en",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="英文名称"
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="指标代码"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="指标描述"),
                ),
                (
                    "sub_category",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="子分类"
                    ),
                ),
                (
                    "sector",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="行业板块"
                    ),
                ),
                (
                    "industry",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="细分行业"
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("D", "日度"),
                            ("W", "周度"),
                            ("M", "月度"),
                            ("Q", "季度"),
                            ("Y", "年度"),
                        ],
                        default="M",
                        max_length=10,
                        verbose_name="数据频率",
                    ),
                ),
                (
                    "lead_lag_status",
                    models.CharField(
                        choices=[
                            ("LEAD", "领先指标"),
                            ("SYNC", "同步指标"),
                            ("LAG", "滞后指标"),
                        ],
                        max_length=10,
                        verbose_name="领先滞后属性",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="数据单位"
                    ),
                ),
                ("source", models.CharField(max_length=100, verbose_name="数据源")),
                (
                    "api_function",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="API函数名"
                    ),
                ),
                (
                    "data_availability",
                    models.CharField(
                        choices=[
                            ("high", "高 - 数据充足"),
                            ("medium", "中 - 数据一般"),
                            ("low", "低 - 数据稀缺"),
                            ("calculated", "计算 - 基于其他指标计算"),
                        ],
                        default="medium",
                        max_length=20,
                        verbose_name="数据可用性",
                    ),
                ),
                (
                    "calculation_method",
                    models.TextField(blank=True, null=True, verbose_name="计算方法"),
                ),
                (
                    "calculation_formula",
                    models.TextField(blank=True, null=True, verbose_name="计算公式"),
                ),
                (
                    "importance_level",
                    models.IntegerField(
                        default=3,
                        help_text="1-5星，5星最重要",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="重要程度",
                    ),
                ),
                (
                    "implementation_phase",
                    models.IntegerField(
                        choices=[
                            (1, "第一阶段 - 核心指标"),
                            (2, "第二阶段 - 扩展指标"),
                            (3, "第三阶段 - 增强指标"),
                        ],
                        default=1,
                        verbose_name="实施阶段",
                    ),
                ),
                (
                    "investment_significance",
                    models.TextField(blank=True, null=True, verbose_name="投资意义"),
                ),
                (
                    "dimension_prosperity",
                    models.BooleanField(default=False, verbose_name="景气度维度"),
                ),
                (
                    "dimension_valuation",
                    models.BooleanField(default=False, verbose_name="估值维度"),
                ),
                (
                    "dimension_crowdedness",
                    models.BooleanField(default=False, verbose_name="拥挤度维度"),
                ),
                (
                    "dimension_technical",
                    models.BooleanField(default=False, verbose_name="技术面维度"),
                ),
                (
                    "dimension_fundamental",
                    models.BooleanField(default=False, verbose_name="基本面维度"),
                ),
                (
                    "dimension_momentum",
                    models.BooleanField(default=False, verbose_name="动量维度"),
                ),
                (
                    "dimension_sentiment",
                    models.BooleanField(default=False, verbose_name="情绪维度"),
                ),
                (
                    "dimension_liquidity",
                    models.BooleanField(default=False, verbose_name="流动性维度"),
                ),
                (
                    "dimension_volatility",
                    models.BooleanField(default=False, verbose_name="波动率维度"),
                ),
                (
                    "dimension_correlation",
                    models.BooleanField(default=False, verbose_name="相关性维度"),
                ),
                (
                    "dimension_seasonality",
                    models.BooleanField(default=False, verbose_name="季节性维度"),
                ),
                (
                    "dimension_policy",
                    models.BooleanField(default=False, verbose_name="政策敏感度维度"),
                ),
                (
                    "dimension_supply_chain",
                    models.BooleanField(default=False, verbose_name="供应链维度"),
                ),
                (
                    "dimension_innovation",
                    models.BooleanField(default=False, verbose_name="创新维度"),
                ),
                (
                    "dimension_esg",
                    models.BooleanField(default=False, verbose_name="ESG维度"),
                ),
                (
                    "dimension_risk",
                    models.BooleanField(default=False, verbose_name="风险维度"),
                ),
                (
                    "data_quality_score",
                    models.FloatField(
                        blank=True,
                        help_text="0-1之间，1表示最高质量",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="数据质量评分",
                    ),
                ),
                (
                    "last_update_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="最后更新日期"
                    ),
                ),
                (
                    "update_frequency_days",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="更新频率(天)"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否启用"),
                ),
                (
                    "is_deprecated",
                    models.BooleanField(default=False, verbose_name="是否废弃"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "metadata",
                    models.JSONField(blank=True, default=dict, verbose_name="元数据"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建人",
                    ),
                ),
                (
                    "dependent_indicators",
                    models.ManyToManyField(
                        blank=True, to="data_hub.indicator", verbose_name="依赖指标"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="indicators",
                        to="data_hub.indicatorcategory",
                        verbose_name="主分类",
                    ),
                ),
            ],
            options={
                "verbose_name": "指标",
                "verbose_name_plural": "指标",
                "ordering": ["implementation_phase", "-importance_level", "name"],
            },
        ),
        migrations.CreateModel(
            name="DataQualityReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("report_date", models.DateField(verbose_name="报告日期")),
                ("completeness_score", models.FloatField(verbose_name="完整性评分")),
                ("timeliness_score", models.FloatField(verbose_name="及时性评分")),
                ("accuracy_score", models.FloatField(verbose_name="准确性评分")),
                ("consistency_score", models.FloatField(verbose_name="一致性评分")),
                (
                    "overall_quality",
                    models.CharField(
                        choices=[
                            ("excellent", "优秀"),
                            ("good", "良好"),
                            ("fair", "一般"),
                            ("poor", "较差"),
                        ],
                        max_length=20,
                        verbose_name="总体质量",
                    ),
                ),
                (
                    "issues_found",
                    models.JSONField(default=list, verbose_name="发现的问题"),
                ),
                (
                    "recommendations",
                    models.TextField(blank=True, null=True, verbose_name="改进建议"),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="data_hub.indicator",
                        verbose_name="指标",
                    ),
                ),
            ],
            options={
                "verbose_name": "数据质量报告",
                "verbose_name_plural": "数据质量报告",
                "ordering": ["-report_date"],
                "unique_together": {("indicator", "report_date")},
            },
        ),
        migrations.CreateModel(
            name="IndicatorData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(verbose_name="日期")),
                ("value", models.FloatField(verbose_name="数值")),
                (
                    "is_estimated",
                    models.BooleanField(default=False, verbose_name="是否为估算值"),
                ),
                (
                    "is_anomaly",
                    models.BooleanField(default=False, verbose_name="是否异常值"),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        help_text="0-1之间，1表示最高置信度",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="置信度",
                    ),
                ),
                (
                    "source_system",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="来源系统"
                    ),
                ),
                (
                    "collection_time",
                    models.DateTimeField(auto_now_add=True, verbose_name="采集时间"),
                ),
                (
                    "raw_value",
                    models.FloatField(blank=True, null=True, verbose_name="原始值"),
                ),
                (
                    "calculated_value",
                    models.FloatField(blank=True, null=True, verbose_name="计算值"),
                ),
                (
                    "calculation_notes",
                    models.TextField(blank=True, null=True, verbose_name="计算说明"),
                ),
                (
                    "indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_points",
                        to="data_hub.indicator",
                        verbose_name="指标",
                    ),
                ),
            ],
            options={
                "verbose_name": "指标数据",
                "verbose_name_plural": "指标数据",
                "ordering": ["-date"],
                "indexes": [
                    models.Index(
                        fields=["indicator", "-date"],
                        name="data_hub_in_indicat_87ed71_idx",
                    ),
                    models.Index(fields=["date"], name="data_hub_in_date_2b07d8_idx"),
                    models.Index(
                        fields=["indicator", "is_anomaly"],
                        name="data_hub_in_indicat_1b68ed_idx",
                    ),
                ],
                "unique_together": {("indicator", "date")},
            },
        ),
    ]
